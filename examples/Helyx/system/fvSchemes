/*--------------------------------*- C++ -*----------------------------------*\
|       o        |                                                            |
|    o     o     |  HELYX (R) : Open-source CFD for Enterprise                |
|   o   O   o    |  Version : 4.3.1                                           |
|    o     o     |  ENGYS Ltd. <http://engys.com/>                            |
|       o        |                                                            |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       dictionary;
    arch        "LSB;label=32;scalar=64";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         smartBounded fixed Euler constant 10;
    ddt(rho,Tr_05)  smartBounded fixed Euler constant 20;
}

gradSchemes
{
    turbulence      cellLimited Gauss linear 1;
    grad(k)         cellLimited Gauss linear 1;
    grad(epsilon)   cellLimited Gauss linear 1;
    default         Gauss linear;
    grad(U)         cellLimited taylorGauss linear 1;
    gradp           cellLimited taylorGauss linear 1;
    grad(p)         cellLimited taylorGauss linear 1;
    gradm(p)        Gauss linear;
}

divSchemes
{
    div(phi,k)      bounded Gauss linearUpwind turbulence;
    div(phi,epsilon) bounded Gauss linearUpwind turbulence;
    default         none;
    div(phi,U)      bounded Gauss linearUpwindV grad(U);
    div(rho,U)      Gauss reverseLinear;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
    div(R)          Gauss linear;
    div((rho*R))    Gauss linear;
    div(nonlinearStress) Gauss linear;
    div((muEff*dev2(grad(U).T()))) Gauss linear;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    div((nu*dev2(T(grad(U))))) Gauss linear;
    div(((rho*(thermo:mu|rho))*dev2(T(grad(U))))) Gauss linear;
    div(phi,Tr_05)  bounded Gauss deferred vanLeer;
}

laplacianSchemes
{
    laplacian((rho*DkEff),k) Gauss linear limited 0.333;
    laplacian((rho*DepsilonEff),epsilon) Gauss linear limited 0.333;
    default         Gauss linear corrected;
    laplacian((rho*nuEff),U) Gauss linear limited 0.333;
    laplacian(-Df,p) Gauss linear limited 0.333;
    laplacian(Df,p) Gauss linear limited 0.333;
}

interpolationSchemes
{
    default         linear;
    interpolate(HbyA) linear;
    rhorD           midPoint;
    gradp           reverseLinear;
    ddtCorr         reverseLinear;
}

snGradSchemes
{
    default         limited 0.333;
}

wallDist
{
    method          meshWave;
}

fluxRequired
{
    default         no;
    p               ;
}


// ************************************************************************* //
